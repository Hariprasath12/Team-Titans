<!DOCTYPE html>
<html lang="en">
	<head>
		{{> head title="Carbon Footprint - Ride Stats" map=true}}
		<style type="text/css">
			.map-container {
				height: 100%;
				opacity: .5;
			}
		</style>
	</head>
	<body>
		<div id="header">
			{{> topNav}}
		</div>
		<div id="content">
			<div class="container">
				<div class="map-container">
					<div id="map-canvas" style="width: 375px; height: 389px;">
						
					</div>
				</div>
				<div class="commute-results-container">
					<div class="commute-results">
				  		<h3>Hope you had a Nice Journey!</h3>
					  	<div id="from">
					  	</div>
						<div id="to">
						</div>
						<div id="carbon-emitted">
						</div>
						<div id="carbon-saved">
						</div>
						<div id="leaf-points">
							
						</div>
					</div>
				</div>
			</div>
		</div>
		<div id="footer">
			{{> bottomNav}}
		</div>
		<script>
			var subscriptionKey = 'Nza85gIRM42J_9HX9kpHwT2ngY-cSobd0o5IZTM8kBs';
			var subscriptionKeyCredential = new atlas.service.SubscriptionKeyCredential(subscriptionKey);
			var pipeline = atlas.service.MapsURL.newPipeline(subscriptionKeyCredential, {
			  retryOptions: { maxTries: 4 } // Retry options
			});
			var searchURL = new atlas.service.SearchURL(pipeline);

			let commute = JSON.parse(localStorage.getItem("commute"));
			console.log(commute);

			initMap();

			let from, to, count, ride, dis;

			if(commute) {
		        from = commute.start;
			    to = commute.end;

			    count = commute.count;
			    ride= commute.ride;
			    dis= commute.distance;

			    document.getElementById('from').innerHTML=`From: ${from.toUpperCase()}`;
			    document.getElementById('to').innerHTML=`To: ${to.toUpperCase()}`;
			}

		    var months = new Array();
			months[0] = "January";
			months[1] = "February";
			months[2] = "March";
			months[3] = "April";
			months[4] = "May";
			months[5] = "June";
			months[6] = "July";
			months[7] = "August";
			months[8] = "September";
			months[9] = "October";
			months[10] = "November";
			months[11] = "December";

			var d = new Date();
			var day = d.getDate().toString();
			var month = months[d.getMonth()].toLowerCase();
			var year = d.getFullYear().toString();

		    function initMap() {		    
		      var map = new atlas.Map('map-canvas', {
		          center: [11.127123, 78.656891],
		          zoom: 1,
		          view: 'Auto',
		          authOptions: {
		              authType: 'subscriptionKey',
		              subscriptionKey: subscriptionKey
		          }
		      });

		      var onChangeHandler = function() {
		        calculateAndDisplayRoute(map);
		      };

		      window.addEventListener('load', onChangeHandler);
		    }

	        function calculateAndDisplayRoute(map) {
    		    if(commute) {
    		      var routeURL = new atlas.service.RouteURL(pipeline);

    		      map.events.add("ready", function () {
    		        
    		        dataSource = new atlas.source.DataSource();
    		        map.sources.add(dataSource);

    		        setTimeout(function() {
    		          console.log(commute);
    		          console.log(commute.start_points.lat);
    		          console.log(commute.start_points.lon);
    		          var startPoint = new atlas.data.Feature(new atlas.data.Point([commute.start_points.lon, commute.start_points.lat]), {
    		            title: commute.start,
    		            icon: "pin-blue"
    		          });

    		          var endPoint = new atlas.data.Feature(new atlas.data.Point([commute.end_points.lon, commute.end_points.lat]), {
    		            title: commute.end,
    		            icon: "pin-round-blue"
    		          });

    		          dataSource.add([startPoint, endPoint]);


    		          map.layers.add(new atlas.layer.LineLayer(dataSource, null, {
    		            strokeColor: '#2272B9',
    		            strokeWidth: 5,
    		            lineJoin: 'round',
    		            lineCap: 'round'
    		          }), 'labels');


    		          map.layers.add(new atlas.layer.SymbolLayer(dataSource, null, {
    		            iconOptions: {
    		              image: ['get', 'icon'],
    		              allowOverlap: true,
    		              ignorePlacement: true
    		            },
    		            textOptions: {
    		              textField: ['get', 'title'],
    		              offset: [0, 1.2]
    		            },
    		            filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']]
    		          }));

    		          
    		          var coordinates = [
    		            startPoint.geometry.coordinates,
    		            endPoint.geometry.coordinates
    		          ];

    		          //Calculate a route.
    		          routeURL.calculateRouteDirections(atlas.service.Aborter.timeout(10000), coordinates).then((directions) => {
    		              var data = directions.geojson.getFeatures();
    		              dataSource.add(data);
    		              
    		              var distanceInMeters = directions.routes[0].summary.lengthInMeters;
    		              var distance = distanceInMeters / 1000;

    		              map.setCamera({
    		                bounds: data.bbox,
    		                padding: 30 //Add a padding to account for the pixel size of symbols.
    		              });
    		          });  
    		        }, 1000);
    		        
    		      });
    		    }
	        }

	        function calculateCarbon(ride) {
	        	let mileage;
	        	let leafPoints;
	        	let rideLeafPoints = 0;

	        	if(ride == "bike") {
	        		mileage = 50;
	        		leafPoints = 15;
	        	} else if(ride == "car") {
	        		mileage = 20;
	        		leafPoints = 10;
	        	} else if(ride == "bus") {
	        		mileage = 5;
	        		leafPoints = 15;
	        	} else if(ride == "train") {
	        		mileage = 5;
	        		leafPoints = 20;
	        	} else {
	        		leafPoints = 25;
	        	}

	        	
	        	let totalOccupants = commute.count;
	        	let carbonEmittedPerLitre;
	        	if(ride == "bike") {
	        		carbonEmittedPerLitre = 2.31;
	        	} else {
	        		carbonEmittedPerLitre = 2.68;
	        	}

	        	let fuelRequiredPerPerson = (dis/mileage);
	        	let totalFuelRequired = ((dis/mileage)/totalOccupants);

	        	let carbonEmissionPerPerson = carbonEmittedPerLitre * fuelRequiredPerPerson;
	        	let totalCarbonEmission;
	        	let carbonSaved;

	        	// console.log(carbonEmissionPerPerson);

	        	if(ride == "walk" || ride == "cycle") {
	        		carbonSaved = carbonEmittedPerLitre;
	        	} else {
	        		carbonSaved = 0;
	        	}
	        	
	        	
	        	if(totalOccupants == 1) {
	        		totalCarbonEmission = carbonEmissionPerPerson;
	        		rideLeafPoints = dis * 4;
	        	} else {
	        		totalCarbonEmission = carbonEmittedPerLitre * totalFuelRequired;
	        		carbonSaved = carbonEmissionPerPerson - totalCarbonEmission;
	        		rideLeafPoints = dis * 4 * leafPoints;
	        	}

	        	commute.totalCarbonEmission = totalCarbonEmission;
	        	commute.carbonSaved = carbonSaved;
	        	commute.rideLeafPoints = rideLeafPoints;

	        	localStorage.setItem("commute", JSON.stringify(commute));

	        	saveCommuteDetails(commute);

	        	if(ride == "walk" || ride == "cycle") {
	        		document.getElementById('carbon-emitted').innerHTML="Carbon Emitted: 0. Yay! You took a cabon free ride.";
	        	} else {
	        		document.getElementById('carbon-emitted').innerHTML=`Carbon Emitted: ${totalCarbonEmission} KG`;
	        	}
	        	document.getElementById('carbon-saved').innerHTML=`Carbon Saved: ${carbonSaved} KG`;
	        	document.getElementById('leaf-points').innerHTML=`Leaf Points Earned: ${rideLeafPoints}`;
	        }

	        if(commute) {
	        	calculateCarbon(commute.ride);
	        }

	        function rebuildCommuteDetails(my_tanso_details) {
				var commute_details = my_tanso_details["commute_details"];
				// console.log('test');
				// console.log(commute_details);

				if(my_tanso_details["commute_details"][year] == undefined) {
					commute_details[year] = {};
					commute_details[year][month] = {};
					commute_details[year][month]["daily_commute_details"] = {};
					commute_details[year][month]["daily_commute_details"][day] = {};
					commute_details[year][month]["daily_commute_details"][day]["commutes"] = [];
					commute_details[year][month]["carbon_stats"] = {
						"carbon_emitted": 0,
						"carbon_saved": 0,
						"leaf_points": 0
					}
				} else {
					if(my_tanso_details["commute_details"][year][month] == undefined) {
						commute_details[year][month] = {};
						commute_details[year][month]["daily_commute_details"] = {};
						commute_details[year][month]["daily_commute_details"][day] = {};
						commute_details[year][month]["daily_commute_details"][day]["commutes"] = [];
						commute_details[year][month]["carbon_stats"] = {
							"carbon_emitted": 0,
							"carbon_saved": 0,
							"leaf_points": 0
						}
					} else {
						if(my_tanso_details["commute_details"][year][month]["daily_commute_details"][day] == undefined) {
							commute_details[year][month]["daily_commute_details"][day] = {};
							commute_details[year][month]["daily_commute_details"][day]["commutes"] = [];
							commute_details[year][month]["carbon_stats"] = {
								"carbon_emitted": 0,
								"carbon_saved": 0,
								"leaf_points": 0
							}	
						}
					}
				}

				return commute_details;
	        }

	        var my_tanso;

	        function loadJSON(callback) {
			    var xobj = new XMLHttpRequest();
			    xobj.overrideMimeType("application/json");
			    xobj.open('GET', 'sample_data', true);
			    xobj.onreadystatechange = function () {
		          if (xobj.readyState == 4 && xobj.status == "200") {
		            callback(xobj.responseText);
		          }
			    };
			    xobj.send(null);  
			}


	        function saveCommuteDetails(commute) {
	        	loadJSON(function(response) {
			    	my_tanso = JSON.parse(response);

			    	// console.log(my_tanso);
					var commute_details = rebuildCommuteDetails(my_tanso);
					commute_details[year][month]["daily_commute_details"][day]["commutes"].push(commute);

					var carbon_stats = commute_details[year][month]["carbon_stats"];
					carbon_stats["carbon_emitted"] += commute.totalCarbonEmission;
					carbon_stats["carbon_saved"] += commute.carbonSaved;
					carbon_stats["leaf_points"] += commute.rideLeafPoints;

					commute_details[year][month]["carbon_stats"] = carbon_stats;

					my_tanso["commute_details"] = commute_details;

					var total_carbon_stats = my_tanso["total_carbon_stats"];
					total_carbon_stats["total_carbon_emitted"] += commute.totalCarbonEmission;
					total_carbon_stats["total_carbon_saved"] += commute.carbonSaved;
					total_carbon_stats["total_leaf_points"] += commute.rideLeafPoints;

					my_tanso["total_carbon_stats"] = total_carbon_stats;

					localStorage.setItem("my_tanso", JSON.stringify(my_tanso));

					updateData();

					localStorage.removeItem("commute");
				});
	        }

	        function updateData() {
	        	let tanso_data = localStorage.getItem("my_tanso");

	        	var xhr = new XMLHttpRequest();
				xhr.open("POST", "/sample_data", true);
				xhr.setRequestHeader('Content-Type', 'application/json');
				xhr.send(JSON.stringify({
				    tanso_data_details: tanso_data
				}));
				xhr.onload = function() {
				  console.log("Tanso Details Updated");
				}
	        }
		  
		</script>
		<script src="./dist/bundle.js"></script>
    </script>
	</body>
</html>