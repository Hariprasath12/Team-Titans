<!DOCTYPE html>
<html lang="en">
	<head>
	  {{> head title="My Tanso - Happy Journey" map=true}}
	</head>
	 <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map-canvas {
        height: 100%;
      }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #floating-panel {
        width: 250px;
        padding: 10px 0;
        position: absolute;
        top: 70px;
        left: 0;
        right: 0;
        margin: 0 auto;
        z-index: 5;
        background-color: #fff;
        border: 2px solid #008000;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
      }
      button {
        background: 0;
        border: 1px solid #008000;
        width: 100px;
        padding: 5px 0;
        margin-top: 10px;
      }
    </style>
	<body>
		<div id="header">
			{{> topNav}}
		</div>
		<div id="content">
      <div class="container">
		  	 <div id="floating-panel">
           <p id='from'></p>
				   <p id='to'></p>
           <p id='distance'></p>
				   <button onclick="end()">End Ride</button>
			   </div>
			   <div id="map-canvas"></div>
      </div>
		</div>
		<div id="footer">
			{{> bottomNav}}
		</div>
		 <script>
        let commute = JSON.parse(localStorage.getItem("commute"));
        console.log(commute);
			  // const queryString = window.location.search;

			  // const urlParams = new URLSearchParams(queryString);
        const from = commute.start;
  		  const to = commute.end;
  		  document.getElementById('from').innerHTML=`From: ${from.toUpperCase()}`;
  		  document.getElementById('to').innerHTML=`To: ${to.toUpperCase()}`;
        document.getElementById('distance').innerHTML=`Distance: ${Math.round(commute.distance)} Km`;
  		  const count = commute.count;
  		  const ride = commute.ride;
  		  const dis = commute.distance;

        var subscriptionKey = 'Nza85gIRM42J_9HX9kpHwT2ngY-cSobd0o5IZTM8kBs';
        var subscriptionKeyCredential = new atlas.service.SubscriptionKeyCredential(subscriptionKey);
        var pipeline = atlas.service.MapsURL.newPipeline(subscriptionKeyCredential, {
          retryOptions: { maxTries: 4 } // Retry options
        });
        var searchURL = new atlas.service.SearchURL(pipeline);

        initMap();

        function initMap() {
          var map = new atlas.Map('map-canvas', {
              center: [11.127123, 78.656891],
              zoom: 1,
              view: 'Auto',
              authOptions: {
                  authType: 'subscriptionKey',
                  subscriptionKey: subscriptionKey
              }
          });

          var onChangeHandler = function() {
            calculateAndDisplayRoute(map);
          };
          window.addEventListener('load', onChangeHandler);
        }


        function calculateAndDisplayRoute(map) {
          if(commute.start !== "" && commute.end !== "") {
            var routeURL = new atlas.service.RouteURL(pipeline);

            map.events.add("ready", function () {
              
              dataSource = new atlas.source.DataSource();
              map.sources.add(dataSource);

              setTimeout(function() {
                console.log(commute);
                console.log(commute.start_points.lat);
                console.log(commute.start_points.lon);
                var startPoint = new atlas.data.Feature(new atlas.data.Point([commute.start_points.lon, commute.start_points.lat]), {
                  title: commute.start,
                  icon: "pin-blue"
                });

                var endPoint = new atlas.data.Feature(new atlas.data.Point([commute.end_points.lon, commute.end_points.lat]), {
                  title: commute.end,
                  icon: "pin-round-blue"
                });

                dataSource.add([startPoint, endPoint]);


                map.layers.add(new atlas.layer.LineLayer(dataSource, null, {
                  strokeColor: '#2272B9',
                  strokeWidth: 5,
                  lineJoin: 'round',
                  lineCap: 'round'
                }), 'labels');


                map.layers.add(new atlas.layer.SymbolLayer(dataSource, null, {
                  iconOptions: {
                    image: ['get', 'icon'],
                    allowOverlap: true,
                    ignorePlacement: true
                  },
                  textOptions: {
                    textField: ['get', 'title'],
                    offset: [0, 1.2]
                  },
                  filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']]
                }));

                
                var coordinates = [
                  startPoint.geometry.coordinates,
                  endPoint.geometry.coordinates
                ];

                //Calculate a route.
                routeURL.calculateRouteDirections(atlas.service.Aborter.timeout(10000), coordinates).then((directions) => {
                    var data = directions.geojson.getFeatures();
                    dataSource.add(data);
                    
                    var distanceInMeters = directions.routes[0].summary.lengthInMeters;
                    var distance = distanceInMeters / 1000;

                    map.setCamera({
                      bounds: data.bbox,
                      padding: 30 //Add a padding to account for the pixel size of symbols.
                    });
                });  
              }, 1000);
              
            });
          }
        }

    	  function end(){
    		  	let url=`${window.location.origin}/end-ride`;
    	      window.location.replace(url);
    	  }
    </script>
		<script src="./dist/bundle.js"></script>
    </script>
	</body>
</html>