<!DOCTYPE html>
<html lang="en">
	<head>
	  {{> head title="My Tanso - Public Transport" map=true}}
	</head>
	<body>
	  	<div id="header">
	  		{{> topNav}}
	  	</div>
	  	<div id="content">
	  	  	{{> transitContent type="Public Transport" public=true}}
	  	</div>
	  	<div id="footer">
	  		{{> bottomNav}}
	  	</div>
	  	<script src="./dist/bundle.js"></script>
		<script>
			var subscriptionKey = 'Nza85gIRM42J_9HX9kpHwT2ngY-cSobd0o5IZTM8kBs';
	        var subscriptionKeyCredential = new atlas.service.SubscriptionKeyCredential(subscriptionKey);
	        var pipeline = atlas.service.MapsURL.newPipeline(subscriptionKeyCredential, {
	          retryOptions: { maxTries: 4 } // Retry options
	        });
	        var searchURL = new atlas.service.SearchURL(pipeline);

		  	let bus='bus';
		  	let train='train';
		    let totaldistance=0;
		  	
		    let commute = JSON.parse(localStorage.getItem("commute"));

		    mapInit();

		  	function mapInit() {
		      var map = new atlas.Map('map-canvas', {
                  center: [11.127123, 78.656891],
                  zoom: 1,
                  view: 'Auto',
                  authOptions: {
                      authType: 'subscriptionKey',
                      subscriptionKey: subscriptionKey
                  }
              });

		      var onChangeHandler = function() {
		    		document.getElementById(bus).style.backgroundColor="#b3d4fc";
		    		document.getElementById(train).style.backgroundColor="#b3d4fc";
		        	calculateAndDisplayRoute(map);
		      };
		      document.getElementById('source').addEventListener('change', onChangeHandler);
		      document.getElementById('destination').addEventListener('change', onChangeHandler);
		    }

		    function updateUI(distance){
		        commute.transit = "shared";
		       
		        commute.distance = distance;

		    	if(distance>5 && distance <=15){
		          	document.getElementById(train).style.backgroundColor="#1aff1a";
		    	} else if(distance > 15){
		          	document.getElementById(bus).style.backgroundColor="#1aff1a";
		        }
		    }

		    function calculateAndDisplayRoute(map) {
		      commute.start = document.getElementById('source').value;
		      commute.end = document.getElementById('destination').value;

		      if(commute.start !== "" && commute.end !== "") {
		        searchURL.searchAddress(atlas.service.Aborter.timeout(10000), commute.start)
		          .then(response => {
		            // console.log(response.results);
		            if(response.results.length > 0) {
		              commute.start_points = response.results[0].position;
		            }
		        });

		        searchURL.searchAddress(atlas.service.Aborter.timeout(10000), commute.end)
		          .then(response => {
		            // console.log(response.results);
		            if(response.results.length > 0) {
		              commute.end_points = response.results[0].position;
		            }
		        });

		        var routeURL = new atlas.service.RouteURL(pipeline);

		        map.events.add("ready", function () {
		          
		          dataSource = new atlas.source.DataSource();
		          map.sources.add(dataSource);

		          setTimeout(function() {
		            console.log(commute);
		            console.log(commute.start_points.lat);
		            console.log(commute.start_points.lon);
		            var startPoint = new atlas.data.Feature(new atlas.data.Point([commute.start_points.lon, commute.start_points.lat]), {
		              title: commute.start,
		              icon: "pin-blue"
		            });

		            var endPoint = new atlas.data.Feature(new atlas.data.Point([commute.end_points.lon, commute.end_points.lat]), {
		              title: commute.end,
		              icon: "pin-round-blue"
		            });

		            dataSource.add([startPoint, endPoint]);


		            map.layers.add(new atlas.layer.LineLayer(dataSource, null, {
		              strokeColor: '#2272B9',
		              strokeWidth: 5,
		              lineJoin: 'round',
		              lineCap: 'round'
		            }), 'labels');


		            map.layers.add(new atlas.layer.SymbolLayer(dataSource, null, {
		              iconOptions: {
		                image: ['get', 'icon'],
		                allowOverlap: true,
		                ignorePlacement: true
		              },
		              textOptions: {
		                textField: ['get', 'title'],
		                offset: [0, 1.2]
		              },
		              filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']]
		            }));

		            
		            var coordinates = [
		              startPoint.geometry.coordinates,
		              endPoint.geometry.coordinates
		            ];

		            //Calculate a route.
		            routeURL.calculateRouteDirections(atlas.service.Aborter.timeout(10000), coordinates).then((directions) => {
		                var data = directions.geojson.getFeatures();
		                dataSource.add(data);
		                
		                var distanceInMeters = directions.routes[0].summary.lengthInMeters;
		                var distance = distanceInMeters / 1000;
		                updateUI(distance);

		                map.setCamera({
		                  bounds: data.bbox,
		                  padding: 30 //Add a padding to account for the pixel size of symbols.
		                });
		            });  
		          }, 1000);
		          
		        });

		        // console.log(commute);
		      }
		    }

		  function startRide(ride){
		    commute.ride = ride;
		    if(ride=='bus') {
		      var txt;
		      var person = prompt("How many are Travelling:", "3");
		      if (person == null || person == "") {
		        txt = "User cancelled the prompt.";
		      } else {
		        console.log(person);
		      	let count=person;
		        commute.count = person;
		        localStorage.setItem("commute", JSON.stringify(commute));
		      	let url=window.location.origin + "/map";
		      	window.location.replace(url);

		        }
		    } else if (ride=='train') {
		      var txt;
		      var person = prompt("How many are Travelling:", "3");
		      if (person == null || person == "") {
		        txt = "User cancelled the prompt.";
		      } else {
		    	let count=person;
		      commute.count = person;
		      localStorage.setItem("commute", JSON.stringify(commute));
		    	let url=window.location.origin + "/map";
		    	window.location.replace(url);  }
		    } else {
		    	let count=1;
		      commute.count = 1;
		      localStorage.setItem("commute", JSON.stringify(commute));
		    	let url=window.location.origin + "/map";
		    	window.location.replace(url);  
		    }
		  }

		  </script>
    </script>
	</body>
</html>